(set-logic QF_LIA)
(declare-fun x0 () Int)
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x4 () Int)
(declare-fun x5 () Int)
(declare-fun x6 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x9 () Int)
(declare-fun A0 () Bool)
(declare-fun A1 () Bool)
(declare-fun A2 () Bool)
(declare-fun A4 () Bool)
(declare-fun A5 () Bool)
(declare-fun A6 () Bool)
(declare-fun A7 () Bool)
(declare-fun A8 () Bool)
(declare-fun A9 () Bool)
(assert (let ((.def_0 (not A2))) (let ((.def_1 (* 1 x6))) (let ((.def_2 (< .def_1 (- 1)))) (let ((.def_3 (and .def_2 .def_0))) (let ((.def_4 (and A4 A9))) (let ((.def_5 (and .def_4 .def_3))) (let ((.def_6 (not .def_5))) (let ((.def_7 (* 1 x1))) (let ((.def_8 (* 1 x3))) (let ((.def_9 (+ .def_8 .def_7))) (let ((.def_10 (< .def_9 1))) (let ((.def_11 (not .def_10))) (let ((.def_12 (not A1))) (let ((.def_13 (and .def_12 .def_11))) (let ((.def_14 (not A0))) (let ((.def_15 (* (- 1) x9))) (let ((.def_16 (* (- 1) x3))) (let ((.def_17 (+ .def_16 .def_15))) (let ((.def_18 (< .def_17 (- 1)))) (let ((.def_19 (and .def_18 .def_14))) (let ((.def_20 (and .def_19 .def_13))) (let ((.def_21 (or .def_20 .def_6))) (let ((.def_22 (not A6))) (let ((.def_23 (and A6 .def_22))) (let ((.def_24 (not .def_23))) (let ((.def_25 (* 1 x8))) (let ((.def_26 (< .def_25 (- 1)))) (let ((.def_27 (not .def_26))) (let ((.def_28 (and .def_27 A5))) (let ((.def_29 (not .def_28))) (let ((.def_30 (and .def_29 .def_24))) (let ((.def_31 (* (- 1) x7))) (let ((.def_32 (+ .def_15 .def_31))) (let ((.def_33 (< .def_32 1))) (let ((.def_34 (not .def_33))) (let ((.def_35 (or A8 .def_34))) (let ((.def_36 (* 1 x2))) (let ((.def_37 (< .def_36 (- 1)))) (let ((.def_38 (not .def_37))) (let ((.def_39 (or .def_12 .def_38))) (let ((.def_40 (and .def_39 .def_35))) (let ((.def_41 (and .def_40 .def_30))) (let ((.def_42 (or .def_41 .def_21))) (let ((.def_43 (not .def_42))) (let ((.def_44 (* 1 x9))) (let ((.def_45 (< .def_44 (- 1)))) (let ((.def_46 (+ .def_44 .def_1))) (let ((.def_47 (< .def_46 (- 1)))) (let ((.def_48 (and .def_47 .def_45))) (let ((.def_49 (not .def_48))) (let ((.def_50 (or A1 .def_14))) (let ((.def_51 (not .def_50))) (let ((.def_52 (and .def_51 .def_49))) (let ((.def_53 (not A8))) (let ((.def_54 (* (- 1) x8))) (let ((.def_55 (+ .def_15 .def_54))) (let ((.def_56 (< .def_55 (- 1)))) (let ((.def_57 (and .def_56 .def_53))) (let ((.def_58 (not .def_57))) (let ((.def_59 (+ .def_36 .def_16))) (let ((.def_60 (< .def_59 1))) (let ((.def_61 (< .def_31 1))) (let ((.def_62 (or .def_61 .def_60))) (let ((.def_63 (or .def_62 .def_58))) (let ((.def_64 (not .def_63))) (let ((.def_65 (= .def_64 .def_52))) (let ((.def_66 (not .def_65))) (let ((.def_67 (or .def_22 A2))) (let ((.def_68 (not A9))) (let ((.def_69 (* (- 1) x2))) (let ((.def_70 (< .def_69 1))) (let ((.def_71 (or .def_70 .def_68))) (let ((.def_72 (or .def_71 .def_67))) (let ((.def_73 (< .def_16 (- 1)))) (let ((.def_74 (or A7 .def_73))) (let ((.def_75 (< .def_7 1))) (let ((.def_76 (not .def_75))) (let ((.def_77 (and A1 .def_76))) (let ((.def_78 (and .def_77 .def_74))) (let ((.def_79 (and .def_78 .def_72))) (let ((.def_80 (or .def_79 .def_66))) (let ((.def_81 (or .def_80 .def_43))) (let ((.def_82 (not .def_81))) (let ((.def_83 (<= x9 1))) (let ((.def_84 (<= 0 x9))) (let ((.def_85 (<= x8 1))) (let ((.def_86 (<= 0 x8))) (let ((.def_87 (<= x7 1))) (let ((.def_88 (<= 0 x7))) (let ((.def_89 (<= x6 1))) (let ((.def_90 (<= 0 x6))) (let ((.def_91 (<= x5 1))) (let ((.def_92 (<= 0 x5))) (let ((.def_93 (<= x4 1))) (let ((.def_94 (<= 0 x4))) (let ((.def_95 (<= x3 1))) (let ((.def_96 (<= 0 x3))) (let ((.def_97 (<= x2 1))) (let ((.def_98 (<= 0 x2))) (let ((.def_99 (<= x1 1))) (let ((.def_100 (<= 0 x1))) (let ((.def_101 (<= x0 1))) (let ((.def_102 (<= 0 x0))) (let ((.def_103 (and .def_102 .def_101 .def_100 .def_99 .def_98 .def_97 .def_96 .def_95 .def_94 .def_93 .def_92 .def_91 .def_90 .def_89 .def_88 .def_87 .def_86 .def_85 .def_84 .def_83 .def_82))) .def_103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
