(set-logic QF_LIA)
(declare-fun x0 () Int)
(declare-fun x1 () Int)
(declare-fun x2 () Int)
(declare-fun x3 () Int)
(declare-fun x4 () Int)
(declare-fun x5 () Int)
(declare-fun x6 () Int)
(declare-fun x7 () Int)
(declare-fun x8 () Int)
(declare-fun x9 () Int)
(declare-fun A0 () Bool)
(declare-fun A1 () Bool)
(declare-fun A2 () Bool)
(declare-fun A3 () Bool)
(declare-fun A4 () Bool)
(declare-fun A6 () Bool)
(declare-fun A8 () Bool)
(declare-fun A9 () Bool)
(assert (let ((.def_0 (not A9))) (let ((.def_1 (= .def_0 .def_0))) (let ((.def_2 (not .def_1))) (let ((.def_3 (* (- 1) x1))) (let ((.def_4 (* (- 1) x5))) (let ((.def_5 (+ .def_4 .def_3))) (let ((.def_6 (< .def_5 (- 1)))) (let ((.def_7 (not A4))) (let ((.def_8 (or .def_7 .def_6))) (let ((.def_9 (or .def_8 .def_2))) (let ((.def_10 (* (- 1) x7))) (let ((.def_11 (* 1 x9))) (let ((.def_12 (+ .def_11 .def_10))) (let ((.def_13 (< .def_12 (- 1)))) (let ((.def_14 (not .def_13))) (let ((.def_15 (and .def_14 A3))) (let ((.def_16 (and A6 A9))) (let ((.def_17 (and .def_16 .def_15))) (let ((.def_18 (and .def_17 .def_9))) (let ((.def_19 (not .def_18))) (let ((.def_20 (not A1))) (let ((.def_21 (= A8 .def_20))) (let ((.def_22 (not .def_6))) (let ((.def_23 (and .def_20 .def_22))) (let ((.def_24 (not .def_23))) (let ((.def_25 (and .def_24 .def_21))) (let ((.def_26 (* 1 x2))) (let ((.def_27 (* 1 x5))) (let ((.def_28 (+ .def_27 .def_26))) (let ((.def_29 (< .def_28 1))) (let ((.def_30 (and A3 .def_29))) (let ((.def_31 (not A2))) (let ((.def_32 (or .def_31 A0))) (let ((.def_33 (not .def_32))) (let ((.def_34 (or .def_33 .def_30))) (let ((.def_35 (or .def_34 .def_25))) (let ((.def_36 (and .def_35 .def_19))) (let ((.def_37 (<= x9 1))) (let ((.def_38 (<= 0 x9))) (let ((.def_39 (<= x8 1))) (let ((.def_40 (<= 0 x8))) (let ((.def_41 (<= x7 1))) (let ((.def_42 (<= 0 x7))) (let ((.def_43 (<= x6 1))) (let ((.def_44 (<= 0 x6))) (let ((.def_45 (<= x5 1))) (let ((.def_46 (<= 0 x5))) (let ((.def_47 (<= x4 1))) (let ((.def_48 (<= 0 x4))) (let ((.def_49 (<= x3 1))) (let ((.def_50 (<= 0 x3))) (let ((.def_51 (<= x2 1))) (let ((.def_52 (<= 0 x2))) (let ((.def_53 (<= x1 1))) (let ((.def_54 (<= 0 x1))) (let ((.def_55 (<= x0 1))) (let ((.def_56 (<= 0 x0))) (let ((.def_57 (and .def_56 .def_55 .def_54 .def_53 .def_52 .def_51 .def_50 .def_49 .def_48 .def_47 .def_46 .def_45 .def_44 .def_43 .def_42 .def_41 .def_40 .def_39 .def_38 .def_37 .def_36))) .def_57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
